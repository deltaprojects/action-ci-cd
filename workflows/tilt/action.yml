name: 'Setup and Execute Tilt'
description: 'Install Tilt and dependencies, authenticate against k8s and docker hub, execute Tilt'
inputs:
  REGISTRY_USERNAME:
    required: true
    description: Container registry username
  REGISTRY_TOKEN:
    required: true
    description: Container registry API access token
  CONTAINER_REGISTRY:
    required: true
    description: Container registry endpoint
  GITHUB_TOKEN:
    required: true
    description: GitHub API token
  RANCHER_CONTEXT:
    required: true
    description: Rancher Context
  RANCHER_URL:
    required: true
    description: Rancher URL
  RANCHER_TOKEN:
    required: true
    description: Rancher API Token

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v3

    - name: Login to Docker Hub
      # Create a access token in docker hub -> settings -> security.
      # Create two GitHub secrets REGISTRY_USERNAME and REGISTRY_TOKEN.
      uses: docker/login-action@v2
      with:
        username: ${{ inputs.REGISTRY_USERNAME }}
        password: ${{ inputs.REGISTRY_TOKEN }}
        registry: ${{ inputs.CONTAINER_REGISTRY }}

    - name: Install kube tools
      env: 
        # renovate: datasource=github-releases depName=tilt-dev/tilt
        TILT_VERSION: 'v0.30.10'
        # renovate: datasource=github-releases depName=rancher/cli
        RANCHER_VERSION: 'v2.6.9'
      uses: yokawasa/action-setup-kube-tools@v0.9.0
      with:
        tilt: ${{ env.TILT_VERSION }}
        rancher: ${{ env.RANCHER_VERSION }}
        setup-tools: |
          tilt
          rancher
          yq

    - name: Download BuildKit CLI for kubectl
      uses: engineerd/configurator@v0.0.8
      with:
        name: kubectl-build
        pathInArchive: kubectl-build
        fromGitHubReleases: true
        repo: vmware-tanzu/buildkit-cli-for-kubectl
        includePrereleases: true
        token: ${{ inputs.GITHUB_TOKEN }}
        urlTemplate: https://github.com/vmware-tanzu/buildkit-cli-for-kubectl/releases/download/{{version}}/linux-{{version}}.tgz
        version: latest

    # - name: configure kubectl from secret
    #   shell: bash
    #   run: |
    #     if ! [[ -z "${{ secrets.KUBE_CONFIG }}" ]]; then
    #       mkdir -p ${HOME}/.kube/ && echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ${HOME}/.kube/config
    #     fi

    - name: configure kubectl from Rancher API key
      shell: bash
      run: |
        if ! [[ -z "${{ inputs.RANCHER_CONTEXT }}" || -z "${{ inputs.RANCHER_TOKEN }}" || -z "${{ inputs.RANCHER_URL }}" ]]; then
          rancher login --context ${{ inputs.RANCHER_CONTEXT }} --token ${{ inputs.RANCHER_TOKEN }} ${{ inputs.RANCHER_URL }}
          mkdir -p ${HOME}/.kube
          rancher kubectl config view --minify --raw > ${HOME}/.kube/config
        else
          echo needs secrets RANCHER_CONTEXT, RANCHER_CONTEXT and RANCHER_URL
          exit 1
        fi

    - name: set RELEASE_TAG variable.
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
      # This does the same:
      # if: github.event_name == 'push' && github.event.ref_type == 'tag' && startsWith(github.event.ref, 'v')
      # github.ref == 'refs/tags/v1.2.5' or 'refs/heads/feature-branch-1'
      # github.event.ref == 'v1.2.5' or 'feature-branch-1'
      shell: bash
      run: echo "RELEASE_TAG=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

    # This was a temporary workaround until https://github.com/actions/runner/issues/834 got solved.
    # - name: set RELEASE_TAG variable.
    #   uses: actions/github-script@v6
    #   with:
    #     github-token: none
    #     # if (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) {
    #     script: |
    #       if (process.env.GITHUB_EVENT_NAME == 'push' && process.env.GITHUB_REF.startsWith('refs/tags/v')) {
    #         const path = require("path"),
    #         fs = require("fs");
    #         const releaseTag = `${process.env.GITHUB_REF}`.split(path.sep).reverse()[0];
    #         fs.appendFileSync(process.env.GITHUB_ENV, `RELEASE_TAG=${releaseTag}`);
    #       }

    - name: build, push and deploy
      shell: bash
      run: tilt ci
